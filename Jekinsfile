pipeline {
    agent any

    environment {
        // Configurações GKE
        PROJECT_ID = 'primal-outrider-456700-m9'
        CLUSTER_NAME = 'autopilot-cluster-1'
        ZONE = 'us-central1-a'
        IMAGE_NAME = "gcr.io/${PROJECT_ID}/gke-demo-app"
        
        // Credenciais (configuradas no Jenkins)
        GIT_CREDENTIALS_ID = 'github-ssh' // ou 'github-token'
        GCP_CREDENTIALS = 'gcp-service-account'
    }

    stages {
        stage('Checkout GitHub') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: 'main']],
                    extensions: [[$class: 'CloneOption', depth: 1]],
                    userRemoteConfigs: [[
                        url: 'git@github.com:seu-usuario/seu-repo.git',
                        credentialsId: GIT_CREDENTIALS_ID
                    ]]
                ])
                sh 'ls -la' // Verifica os arquivos baixados
            }
        }

        stage('Build Docker Image') {
            steps {
                dir('app') {
                    script {
                        def tag = "${env.BUILD_NUMBER}-${env.GIT_COMMIT.substring(0,7)}"
                        docker.build("${IMAGE_NAME}:${tag}")
                        env.DOCKER_TAG = tag
                    }
                }
            }
        }

        stage('Push to GCR') {
            steps {
                script {
                    withCredentials([file(credentialsId: GCP_CREDENTIALS, variable: 'GCP_KEY')]) {
                        sh """
                            gcloud auth activate-service-account --key-file=${GCP_KEY}
                            gcloud auth configure-docker
                        """
                        docker.withRegistry('https://gcr.io', GCP_CREDENTIALS) {
                            docker.image("${IMAGE_NAME}:${env.DOCKER_TAG}").push()
                        }
                    }
                }
            }
        }

        stage('Deploy on GKE') {
            steps {
                script {
                    withCredentials([file(credentialsId: GCP_CREDENTIALS, variable: 'GCP_KEY')]) {
                        sh """
                            gcloud container clusters get-credentials ${CLUSTER_NAME} \
                                --zone ${ZONE} \
                                --project ${PROJECT_ID}
                            
                            sed -i 's#gcr.io/.*/gke-d
