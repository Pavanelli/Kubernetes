pipeline {
    agent any

    environment {
        PROJECT_ID = 'primal-outrider-456700-m9'
        CLUSTER_NAME = 'autopilot-cluster-1'
        ZONE = 'us-central1-a'
        IMAGE_NAME = "gcr.io/${PROJECT_ID}/gke-demo-app"
        GCP_CREDENTIALS = 'gcp-service-account'
    }

    stages {
        stage('Checkout GitHub') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: 'main']],
                    extensions: [[$class: 'CloneOption', depth: 1]],
                    userRemoteConfigs: [[
                        url: 'https://github.com/Pavanelli/Kubernetes.git'
                    ]]
                ])
                script {
                    // Garante que temos o commit hash
                    env.GIT_COMMIT = sh(returnStdout: true, script: 'git rev-parse HEAD').trim()
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                dir('app') {
                    script {
                        // Fallback seguro se GIT_COMMIT não estiver disponível
                        def commitHash = env.GIT_COMMIT ?: "build-${env.BUILD_NUMBER}"
                        def tag = "${env.BUILD_NUMBER}-${commitHash.substring(0,7)}"
                        docker.build("${IMAGE_NAME}:${tag}")
                        env.DOCKER_TAG = tag
                    }
                }
            }
        }

        // Os demais estágios permanecem iguais...
        stage('Push to GCR') {
            steps {
                script {
                    withCredentials([file(credentialsId: GCP_CREDENTIALS, variable: 'GCP_KEY')]) {
                        sh """
                            gcloud auth activate-service-account --key-file=${GCP_KEY}
                            gcloud auth configure-docker
                        """
                        docker.withRegistry('https://gcr.io', GCP_CREDENTIALS) {
                            docker.image("${IMAGE_NAME}:${env.DOCKER_TAG}").push()
                        }
                    }
                }
            }
        }

        stage('Deploy on GKE') {
            steps {
                script {
                    withCredentials([file(credentialsId: GCP_CREDENTIALS, variable: 'GCP_KEY')]) {
                        sh """
                            gcloud container clusters get-credentials ${CLUSTER_NAME} \
                                --zone ${ZONE} \
                                --project ${PROJECT_ID}
                            
                            sed -i 's#gcr.io/.*/gke-demo-app:latest#${IMAGE_NAME}:${env.DOCKER_TAG}#' app/deployment.yaml
                            kubectl apply -f app/deployment.yaml
                        """
                    }
                }
            }
        }
    }
}
